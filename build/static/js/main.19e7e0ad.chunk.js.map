{"version":3,"sources":["RotaryKnob.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["RotaryKnob","isDisabled","width","tWidth","value","max","min","backgroundColor","color","caretColor","showValueLabel","debounceDelay","lineWidth","cbValChanged","val","caretWidth","height","canvasRef","useRef","context","useState","setVal","isDragging","verticalDiff","lastOffset","send","isFloatNumberMode","useEffect","current","debounce","Math","floor","canvas","ctx","getContext","focus","restore","valToY","lineCap","fillStyle","strokeStyle","draw","onPointerDown","noop","ev","setPointerCapture","pointerId","nativeEvent","offsetY","onPointerMove","e","onPointerUp","releasePointerCapture","ref","toString","slice","vDiff","yVal","y","tmpVal","isNaN","yToVal","yValTmp","clearCanvasRect","pos","radius","translate","xOffSet","beginPath","arc","PI","fill","stroke","closePath","rot","moveTo","rotate","lineTo","drawCaret","App","setWidth","setMax","setMin","setlineWidth","bgColor","setBgColor","className","name","type","onChange","target","defaultValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19e7e0ad.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { debounce } from \"debounce\";\n\nexport default RotaryKnob;\n\nfunction RotaryKnob({\n  isDisabled = false,\n  width: tWidth = 160,\n  value = 80,\n  max = 127,\n  min = 0,\n  backgroundColor = \"#ccc\",\n  color = \"#37332ee0\",\n  caretColor = \"#67332ee0\",\n  showValueLabel = true,\n  debounceDelay = 5,\n  lineWidth = 40,\n  cbValChanged = (val: number) => val,\n}) {\n  const caretWidth = tWidth / lineWidth;\n  const width = tWidth - 4 * caretWidth;\n  const height = tWidth - 4 * caretWidth;\n  let canvasRef = useRef<HTMLCanvasElement | null>(null);\n  let context = useRef<CanvasRenderingContext2D| null>(null);\n  const [val, setVal] = useState(value);\n  const isDragging = useRef(false);\n  const verticalDiff = useRef(0);\n  const lastOffset = useRef(0);\n  let send: any = useRef(null);\n  const isFloatNumberMode = useRef(false);\n\n  useEffect(() => {\n    if ((max - min) <= 1) {\n      isFloatNumberMode.current = true;\n    }\n    send.current = debounce(sendValOut, debounceDelay);\n    function sendValOut(val: any) {\n      return cbValChanged(isFloatNumberMode.current ? val : Math.floor(val));\n    }\n    return () => {\n      send.current = null;\n    };\n  }, [max, min, debounceDelay]);\n\n  useEffect(() => {\n    const canvas: HTMLCanvasElement = canvasRef.current!;\n    let ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\")!;\n    context.current = ctx;\n    canvas.focus();\n    return () => {\n      ctx.restore();\n    };\n  }, []);\n\n  useEffect(() => {\n    const ctx: any = context.current;\n    lastOffset.current = valToY(val);\n    ctx.lineWidth = caretWidth;\n    ctx.lineCap = \"round\";\n    ctx.fillStyle = backgroundColor;\n    ctx.strokeStyle = color;\n\n    draw(valToY(val));\n    return () => {\n      ctx.restore();\n    };\n  }, [color, backgroundColor, width, height, caretWidth]);\n\n  useEffect(() => {\n    draw(valToY(value));\n  }, [value]);\n\n  return (\n    <div>\n      <canvas\n        width={width}\n        height={height}\n        onPointerDown={isDisabled ? noop : handleDown}\n        onPointerMove={isDisabled ? noop : handleMove}\n        onPointerUp={isDisabled ? noop : handleCancel}\n        ref={canvasRef}\n      />\n      {showValueLabel && (\n        <div>{val.toString().slice(0, 5)}</div>\n      )}\n    </div>\n  );\n\n  function yToVal(y: number) {\n    const canvas: HTMLCanvasElement = canvasRef.current!;\n    const tH: number = canvas.height ;\n    const val = y / tH;\n    const ttH = 1;\n    const tmpVal = val < 0 ? 0 : val > ttH ? ttH : val;\n    const ttval = isNaN(tmpVal) ? value : tmpVal;\n    return ttval;\n  }\n\n  function valToY(val: number) {\n    const canvas: HTMLCanvasElement = canvasRef.current!;\n    const tmpVal = canvas.height * val / max;\n    return tmpVal;\n  }\n\n  function draw(vDiff: number) {\n    const ctx: any = context.current;\n    if (!ctx.canvas) return;\n    const yVal: number = yToVal(vDiff);\n    const yValTmp: number = yVal * max;\n    setVal(yValTmp);\n    send.current(yValTmp);\n    clearCanvasRect(ctx);\n    drawCaret(ctx, yVal);\n  }\n\n  function handleDown(ev: any) {\n    const canvas: HTMLCanvasElement = canvasRef.current!;\n    canvas.setPointerCapture(ev.pointerId);\n    verticalDiff.current = ev.nativeEvent.offsetY;\n    isDragging.current = true;\n  }\n\n  function handleMove(e: any) {\n    if (isDragging.current === true) {\n      const tV = -e.nativeEvent.offsetY + verticalDiff.current +\n        lastOffset.current;\n      draw(tV);\n    }\n  }\n\n  function handleCancel(ev: any) {\n    const canvas: HTMLCanvasElement = canvasRef.current!;\n    canvas.releasePointerCapture(ev.pointerId);\n    lastOffset.current = valToY(val);\n    isDragging.current = false;\n  }\n\n  function clearCanvasRect(ctx: any) {\n    // ctx.clearRect(\n    //   -canvasRef.current.width / 2,\n    //   -canvasRef.current.height / 2,\n    //   width,\n    //   height,\n    // );\n    ctx.restore();\n  }\n  function drawCaret(ctx: any, pos: number) {\n    const canvas: HTMLCanvasElement = canvasRef.current!;\n    const radius = canvas.height / 2;\n    ctx.translate(radius, radius);\n    const xOffSet = canvas.width / 2;\n    ctx.lineWidth = caretWidth;\n    ctx.beginPath();\n    ctx.arc(\n      0,\n      0,\n      xOffSet - caretWidth,\n      0,\n      Math.PI * 2,\n      true,\n    );\n    ctx.strokeStyle = color;\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath();\n    const rot = -pos * Math.PI * 2;\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.rotate(-rot);\n    ctx.lineTo(0, xOffSet - 4 * caretWidth);\n    ctx.rotate(rot);\n    ctx.strokeStyle = caretColor;\n    ctx.lineWidth = caretWidth*2;\n    ctx.stroke();\n    ctx.translate(-radius, -radius);\n    ctx.closePath();\n  }\n}\n\nfunction noop() {}\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport RotaryKnob from \"./RotaryKnob\";\n\nfunction App() {\n  const [width, setWidth] = useState(250);\n  const [max, setMax] = useState(127);\n  const [min, setMin] = useState(27);\n  const [lineWidth, setlineWidth] = useState(200);\n  const [bgColor, setBgColor] = useState(\"#eee\")\n  return (\n    <div className=\"App\">\n      <h2>Canvas Rotary Knob</h2>\n\n      <div className=\"flex-wrap\">\n        <div className=\"flex-left\">\n          <label>width:</label>\n          <input\n            name=\"size\"\n            type=\"range\"\n            min={30}\n            max={600}\n            onChange={onWidthChange}\n          >\n          </input>\n          <label>max:</label>\n          <input\n            name=\"max\"\n            type=\"input\"\n            defaultValue={max}\n            min={30}\n            max={600}\n            onChange={onMaxChange}\n          >\n          </input>\n          \n          <label>min:</label>\n          <input\n            name=\"min\"\n            type=\"input\"\n            defaultValue={min}\n            min={30}\n            max={600}\n            onChange={onMinChange}\n          >\n          </input>\n        \n          <label>line width:</label>\n          <input\n            name=\"line-width\"\n            type=\"range\"\n            defaultValue={min}\n            min={10}\n            max={90}\n            onChange={onLineWidthChange}\n          >\n          </input>\n        \n          <label>background Color:</label>\n          <input\n            name=\"b-color\"\n            type=\"text\"\n            defaultValue={bgColor}\n\n            onChange={onBgColorChange}\n          >\n          </input>\n        \n\n        </div>\n\n        <div className=\"flex-right\">\n          <RotaryKnob width={width} max={max} min={min} lineWidth={lineWidth} backgroundColor={bgColor}></RotaryKnob>\n        </div>\n      </div>\n    </div>\n  );\n  function onWidthChange(e: any) {\n    setWidth(e.target.value);\n  }\n  function onMaxChange(e: any) {\n    setMax(e.target.value);\n  }\n  function onMinChange(e: any) {\n    setMin(e.target.value);\n  }\n  function onLineWidthChange(e: any){\n    setlineWidth(e.target.value)\n  }\n  function onBgColorChange (e: any) {\n    setBgColor(e.target.value)\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}